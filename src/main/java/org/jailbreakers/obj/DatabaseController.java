package org.jailbreakers.obj;

import java.sql.*;

/**
 * <h1>DatabaseController singleton class is used for handling database events.</h1>
 *
 * <p>Class should not handle exceptions after connecting but instead view models should handle them.<br>
 * Class is maintained by <B>Martin Ragan</B> and he is responsible for its functionality.<br>
 * <br>
 * An instance of class is only one (singleton concept), that's why constructor is private to prevent new instance creation.<br>
 * Method {@link #getInstance()} returns instance of DatabaseController and creates new one if no instance
 * was created. This method ensures that any other class can get an instance of only one {@link #connection}.<br>
 * Class has only one Connection object which is used until closed with {@link #abortConnection()} method.<br>
 * <p>
 * {@link #connectingThread} , {@link #loggingInThread} and {@link #registerThread} threads are threads which handle
 * asynchronous events of database. In our case login, register and connect. Threads are canceled if {@link #abortConnection()}
 * method is called.</p>
 *
 * @author JailBreakersTeam (Matej Kandráč, Martin Ragan, Ján Kočíš)
 * @version 1.0
 * @since 29.5.2020
 */

public class DatabaseController {

    private static DatabaseController instance;

    private Connection connection;
    private Thread connectingThread;
    private Thread loggingInThread;
    private Thread registerThread;
    public User user;
    private String loggedUserUuid;
    private String currentNoteUuid;

    private DatabaseController() {
    }

    public static DatabaseController getInstance() {
        if (instance == null)
            instance = new DatabaseController();
        return instance;
    }

    public void connect(ConnectionEvent event) {
        connectingThread = new Thread(() -> {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                connection = DriverManager.getConnection(
                        "jdbc:mysql://localhost:3306/jailbreakersdiary?serverTimezone=CET",
                        "jailbreakersclient",
                        "jailbreakersapp");
                if (event != null)
                    event.onConnect();
            } catch (Exception e) {
                if (event != null)
                    event.onConnectionError(e.getMessage());
            }
        });
        connectingThread.setDaemon(true);
        connectingThread.start();
    }

    public void login(String email, String pass) throws SQLException, IllegalStateException {
        Statement stm = connection.createStatement();
        String sql = "select * from users where email ='" + email + "' and pass = md5('" + pass + "');";
        ResultSet rs = stm.executeQuery(sql);
        if (rs != null) {
            if (rs.next()) {
                loggedUserUuid = rs.getString("id_user");
//                String id = rs.getString("id_user");
//                String emailData = rs.getString("email");
//                String passData = rs.getString("pass");
//                String idNote = rs.getString("id_note");
//                String content = rs.getString("content");
//                Note note = new Note(idNote, content);
//                user = new User(id, emailData, passData, note);
//                System.out.println(emailData);
            } else
                throw new IllegalStateException("user not found");
        }
    }

    /**
     * Creates a new user in database.
     * Note that exceptions are not handled in method and are instead thrown.
     * Method does not check password length and its content because DatabaseController is for working with database
     * and not checking information.
     * <p>
     * Method creates a Statement and executes a simple sql query.
     * Password is encrypted with md5 encryption method integrated in MySQL language.
     * Id of created user is an uuid generated by MySQL integrated method. Uuid ensures there is no duplicate key.
     * After register, user will be logged in by his account automatically.
     *
     * @param email is a password of user wants to have
     * @param pass  is an email which we want to register
     * @throws SQLException is thrown during register if sql connection happens to fail
     */

    public void register(String email, String pass) throws SQLException {
        Statement stm = connection.createStatement();
        String sql = "insert into users "
                + "(id_user,email,pass) "
                + "values (uuid(),'"
                + email + "', md5('" + pass
                + "'))";
        stm.executeUpdate(sql);
        login(email, pass);
    }

    public void fetchNoteByDate(String date, NoteFetchEvent event) throws SQLException {
        Statement statement = connection.createStatement();
        String sql = "select * from notes where id_user = '" + loggedUserUuid + "' and date = '" + date + "'";
        ResultSet resultSet = statement.executeQuery(sql);
        if (resultSet != null) {
            if (resultSet.next()) {
                currentNoteUuid = resultSet.getString("id_note");
                event.onSuccess(resultSet.getString("content"));
            } else {
                currentNoteUuid = "";
                event.onSuccess("");
            }
        }
    }

    /**
     * Saves/updates user's notes.
     * Note that exceptions are not handled in method and are instead thrown.
     * Method creates a Statement and executes a simple sql query.
     *
     * @param note is text of note itself
     * @param date is date that note is being saved at
     * @throws SQLException is thrown during register if sql connection happens to fail
     */

    public void updateNote(String note, String date) throws SQLException {
        Statement stm = connection.createStatement();
        String insertSql;
        if (currentNoteUuid.isEmpty()) {
            String uuidSql = "select uuid() as id";
            ResultSet set = stm.executeQuery(uuidSql);
            String uuid = "";
            if (set != null) {
                if (set.next())
                    uuid = set.getString("id");
            }
            insertSql = "insert into notes (id_note, id_user, content, date) value ('" + uuid + "', " +
                    "'" + loggedUserUuid + "', '" + note + "', '" + date + "')";
            currentNoteUuid = uuid;
        } else {
            insertSql = "update notes set content ='" + note + "' where id_user = '"
                    + loggedUserUuid + "' and date = '" + date + "'";
        }
        stm.executeUpdate(insertSql);

    }

    /**
     * Aborts connection in the database and stops all running threads used by DatabaseController
     * Method checks for all living threads and stops them. It also closes the Connection of the database
     * Closing of connection is handled in controller because it does not have to be handled inside view models.
     */

    public void abortConnection() {
        if (connectingThread.isAlive())
            connectingThread.interrupt();
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
        }
    }

    public interface NoteFetchEvent {
        void onSuccess(String note);
    }
}
