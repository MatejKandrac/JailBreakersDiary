package org.jailbreakers.obj;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * DatabaseController singleton class is used for handling database events.
 *
 * @author JailBreakersTeam (Matej Kandráč, Martin Ragan, Ján Kočíš)
 * @version 1.0
 * @since 29.5.2020
 *
 * Class should not handle exceptions after connecting but instead view models should handle them.
 * Class is maintained by Martin Ragan and he is responsible for its functionality.
 *
 * An instance of class is only one (singleton concept), that's why constructor is private to prevent new instance creation.
 * Method {@link #getInstance()} returns instance of DatabaseController and creates new one if no instance
 * was created. This method ensures that any other class can get an instance of only one {@link #connection}.
 * Class has only one Connection object which is used until closed with {@link #abortConnection()} method.
 *
 * {@link #connectingThread} , {@link #loggingInThread} and {@link #registerThread} threads are threads which handle
 * asynchronous events of database. In our case login, register and connect. Threads are canceled if {@link #abortConnection()}
 * method is called.
 */

public class DatabaseController {

    private static DatabaseController instance;

    private Connection connection;
    private Thread connectingThread;
    private Thread loggingInThread;
    private Thread registerThread;

    private DatabaseController() {
    }

    public static DatabaseController getInstance() {
        if (instance == null)
            instance = new DatabaseController();
        return instance;
    }

    public void connect(ConnectionEvent event) {
        connectingThread = new Thread(() -> {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                connection = DriverManager.getConnection(
                        "jdbc:mysql://db80.websupport.sk:3314/ufih4ysx?serverTimezone=CET", "ufih4ysx", "Gi6|-?#26q");
                if (event != null)
                    event.onConnect();
            } catch (Exception e) {
                if (event != null)
                    event.onConnectionError(e.getMessage());
            }
        });
        connectingThread.setDaemon(true);
        connectingThread.start();
    }

    public void login(String email, String pass) throws SQLException, IllegalStateException {
        //If user was not found: throw new IllegalStateException("User was not found");
    }

    /**
     * Creates a new user in database.
     * Note that exceptions are not handled in method and are instead thrown.
     * Method does not check password length and its content because DatabaseController is for working with database
     * and not checking information.
     *
     * Method creates a Statement and executes a simple sql query.
     * Password is encrypted with md5 encryption method integrated in MySQL language.
     * Id of created user is an uuid generated by MySQL integrated method. Uuid ensures there is no duplicate key.
     *
     * @param email is a password of user wants to have
     * @param pass is an email which we want to register
     * @throws SQLException is thrown during register if sql connection happens to fail
     */

    public void register(String email, String pass) throws SQLException {
        Statement stm = connection.createStatement();
        String sql = "insert into users "
                + "(id_user,email,pass) "
                + "values (uuid(),'"
                + email + "', md5('" + pass
                + "'))";
        stm.executeUpdate(sql);
    }

    /**
     * Aborts connection in the database and stops all running threads used be DatabaseController
     * Method checks for all living threads and stops them. It also closes the Connection of the database
     * Closing of connection is handled in controller because it does not have to be handled inside view models.
     */

    public void abortConnection() {
        if (connectingThread.isAlive())
            connectingThread.stop();
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
        }
    }
}
